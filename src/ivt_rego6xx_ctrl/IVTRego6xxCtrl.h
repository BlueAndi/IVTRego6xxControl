/* MIT License
 *
 * Copyright (c) 2025 Andreas Merkle <web@blue-andi.de>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*******************************************************************************
    DESCRIPTION
*******************************************************************************/
/**
 * @brief  IVT rego6xx controller component.
 * @author Andreas Merkle <web@blue-andi.de>
 *
 * @addtogroup APP_LAYER
 *
 * @{
 */

#pragma once

/******************************************************************************
 * Compile Switches
 *****************************************************************************/

/******************************************************************************
 * Includes
 *****************************************************************************/

#include "esphome/core/component.h"
#include "esphome/components/uart/uart.h"
#include "Rego6xxCtrl.h"

#include "SimpleTimer.hpp"
#include "StreamUartDevAdapter.h"
#include "sensor/IVTRego6xxSensor.h"
#include "binary_sensor/IVTRego6xxBinarySensor.h"
#include "text_sensor/IVTRego6xxTextSensor.h"
#include "button/IVTRego6xxButton.h"
#include "number/IVTRego6xxNumber.h"

/******************************************************************************
 * Macros
 *****************************************************************************/

/******************************************************************************
 * Types and Classes
 *****************************************************************************/

/** ESPHome namspace */
namespace esphome
{

/** IVT rego6xx controller namespace */
namespace ivt_rego6xx_ctrl
{

/**
 * IVT Rego6xx controller component for ESPHome.
 */
class IVTRego6xxCtrl : public uart::UARTDevice, public Component
{
public:

    /**
     * Constructs the IVT rego6xx controller component.
     */
    IVTRego6xxCtrl() :
        m_adapter(),
        m_ctrl(m_adapter),
        m_state(STATE_BUTTONS),
        m_pauseTimer(),
        m_rego6xxRsp(nullptr),
        m_displayRsp(nullptr),
        m_confirmRsp(nullptr),

        m_sensorTimer(),
        m_sensorCount(0U),
        m_sensors{ nullptr },
        m_currentSensorIndex(MAX_SENSORS),

        m_binarySensorTimer(),
        m_binarySensorCount(0U),
        m_binarySensors{ nullptr },
        m_currentBinarySensorIndex(MAX_BINARY_SENSORS),

        m_textSensorTimer(),
        m_textSensorCount(0U),
        m_textSensors{ nullptr },
        m_currentTextSensorIndex(MAX_TEXT_SENSORS),

        m_buttonCount(0U),
        m_buttons{ nullptr },
        m_currentButtonIndex(MAX_BUTTONS),

        m_numberTimer(),
        m_numberCount(0U),
        m_numbers{ nullptr },
        m_currentNumberIndex(MAX_NUMBERS),
        m_currentNumberUpdateIndex(MAX_NUMBERS)
    {
        m_adapter.setUartDevice(this);
    }

    /**
     * Destroys the IVT rego6xx controller component.
     */
    ~IVTRego6xxCtrl()
    {
    }

    /**
     * Initialize the IVT rego6xx controller component.
     */
    void setup() override;

    /**
     * Handle the loop.
     */
    void loop() override;

    /**
     * Dump the configuration of the component.
     */
    void dump_config() override;

    /**
     * Register a sensor.
     * This will be called during setup() by the code generated by ESPHome.
     *
     * @param[in] sensor    The sensor to register.
     */
    void registerSensor(IVTRego6xxSensor* sensor);

    /**
     * Register a binary sensor.
     * This will be called during setup() by the code generated by ESPHome.
     *
     * @param[in] binarySensor  The binary sensor to register.
     */
    void registerBinarySensor(IVTRego6xxBinarySensor* binarySensor);

    /**
     * Register a text sensor.
     * This will be called during setup() by the code generated by ESPHome.
     *
     * @param[in] textSensor    The text sensor to register.
     */
    void registerTextSensor(IVTRego6xxTextSensor* textSensor);

    /**
     * Register a button.
     * This will be called during setup() by the code generated by ESPHome.
     *
     * @param[in] button    The button to register.
     */
    void registerButton(IVTRego6xxButton* button);

    /**
     * Register a number.
     * This will be called during setup() by the code generated by ESPHome.
     *
     * @param[in] number    The number to register.
     */
    void registerNumber(IVTRego6xxNumber* number);

private:

    /**
     * State machine states of the IVT rego6xx controller.
     */
    enum State
    {
        STATE_BUTTONS = 0U,   /**< Handle buttons. */
        STATE_NUMBERS_UPDATE, /**< Handle number updates. */
        STATE_SENSORS,        /**< Handle sensors. */
        STATE_BINARY_SENSORS, /**< Handle binary sensors. */
        STATE_TEXT_SENSORS,   /**< Handle text sensors. */
        STATE_NUMBERS,        /**< Handle numbers. */
    };

    /** Maximum number of sensors. */
    static const size_t MAX_SENSORS                 = 11U;

    /** Maximum number of binary sensors. */
    static const size_t MAX_BINARY_SENSORS          = 5U;

    /** Maximum number of text sensors. */
    static const size_t MAX_TEXT_SENSORS            = 4U;

    /** Maximum number of buttons. */
    static const size_t MAX_BUTTONS                 = 6U;

    /** Maximum number of numbers. */
    static const size_t MAX_NUMBERS                 = 8U;

    /**
     * Duration in ms after the first time all kind of sensors are read.
     * After about 10s the webserver is up and running, as well as the MQTT client connected.
     */
    static const uint32_t SENSOR_READ_INITIAL       = SIMPLE_TIMER_SECONDS(10U);

    /** Period in ms for reading sensors from heatpump. */
    static const uint32_t SENSOR_READ_PERIOD        = SIMPLE_TIMER_MINUTES(2U);

    /** Period in ms for reading binary sensors from heatpump. */
    static const uint32_t BINARY_SENSOR_READ_PERIOD = SIMPLE_TIMER_SECONDS(30U);

    /** Period in ms for reading text sensors from heatpump. */
    static const uint32_t TEXT_SENSOR_READ_PERIOD   = SIMPLE_TIMER_SECONDS(30U);

    /** Period in ms for reading numbers from heatpump. */
    static const uint32_t NUMBER_READ_PERIOD        = SIMPLE_TIMER_SECONDS(60U);

    /** Pause between every request to the heatpump controller in ms. */
    static const uint32_t    REGO6xx_REQ_PAUSE      = SIMPLE_TIMER_SECONDS(1U);

    StreamUartDevAdapter     m_adapter;    /**< Stream to UART device adapter. */
    Rego6xxCtrl              m_ctrl;       /**< IVT rego6xx controller. */
    State                    m_state;      /**< State machine of the IVT rego6xx controller. */
    SimpleTimer              m_pauseTimer; /**< Timer used to pause between each heatpump request. This shall avoid problems with the Rego6xx controller. */
    const Rego6xxStdRsp*     m_rego6xxRsp; /**< Pending Rego6xx response, used to read sensors and binary sensors. */
    const Rego6xxDisplayRsp* m_displayRsp; /**< Pending Rego6xx display response, used to read text sensors. */
    const Rego6xxConfirmRsp* m_confirmRsp; /**< Pending Rego6xx confirmation response, used to write buttons. */

    SimpleTimer              m_sensorTimer;          /**< Timer used to read cyclic all registered sensors values from the heatpump. */
    size_t                   m_sensorCount;          /**< Number of registered sensors. */
    IVTRego6xxSensor*        m_sensors[MAX_SENSORS]; /**< List of registered sensors. */
    size_t                   m_currentSensorIndex;   /**< Index of the current sensor to read. */

    SimpleTimer              m_binarySensorTimer;                 /**< Timer used to read cyclic all registered binary sensors values from the heatpump. */
    size_t                   m_binarySensorCount;                 /**< Number of registered binary sensors. */
    IVTRego6xxBinarySensor*  m_binarySensors[MAX_BINARY_SENSORS]; /**< List of registered binary sensors. */
    size_t                   m_currentBinarySensorIndex;          /**< Index of the current binary sensor to read. */

    SimpleTimer              m_textSensorTimer;                 /**< Timer used to read cyclic all registered text sensors values from the heatpump. */
    size_t                   m_textSensorCount;                 /**< Number of registered text sensors. */
    IVTRego6xxTextSensor*    m_textSensors[MAX_BINARY_SENSORS]; /**< List of registered text sensors. */
    size_t                   m_currentTextSensorIndex;          /**< Index of the current text sensor to read. */

    size_t                   m_buttonCount;          /**< Number of registered buttons. */
    IVTRego6xxButton*        m_buttons[MAX_BUTTONS]; /**< List of registered buttons. */
    size_t                   m_currentButtonIndex;   /**< Index of the current button to read. */

    SimpleTimer              m_numberTimer;              /**< Timer used to read cyclic all registered number values from the heatpump. */
    size_t                   m_numberCount;              /**< Number of registered numbers. */
    IVTRego6xxNumber*        m_numbers[MAX_NUMBERS];     /**< List of registered numbers. */
    size_t                   m_currentNumberIndex;       /**< Index of the current number to read. */
    size_t                   m_currentNumberUpdateIndex; /**< Index of the current number to update. */

    /**
     * Get the pending state.
     *
     * @param[in] currentState The current state.
     *
     * @return Pending state.
     */
    State getPendingState(State currentState);

    /**
     * Process the state machine.
     */
    void processStateMachine();

    /**
     * Process the buttons.
     *
     * @return If waiting for a response or not all buttons handled,
     *          it will return true otherwise false.
     */
    bool processButtons();

    /**
     * Process the number updates.
     *
     * @return If waiting for a response or not all numbers handled,
     *          it will return true otherwise false.
     */
    bool processNumberUpdates();

    /**
     * Process the sensors.
     *
     * @return If waiting for a response or not all sensors handled,
     *          it will return true otherwise false.
     */
    bool processSensors();

    /**
     * Process the binary sensors.
     *
     * @return If waiting for a response or not all binary sensors handled,
     *          it will return true otherwise false.
     */
    bool processBinarySensors();

    /**
     * Process the text sensors.
     *
     * @return If waiting for a response or not all text sensors handled,
     *          it will return true otherwise false.
     */
    bool processTextSensors();

    /**
     * Process the numbers.
     *
     * @return If waiting for a response or not all numbers handled,
     *          it will return true otherwise false.
     */
    bool processNumbers();

    /**
     * Read all registered sensors.
     */
    void readSensors();

    /**
     * Read all registered binary sensors.
     */
    void readBinarySensors();

    /**
     * Read all registered text sensors.
     */
    void readTextSensors();

    /**
     * Read all registered numbers.
     */
    void readNumbers();
};

} /* namespace ivt_rego6xx_ctrl */
} /* namespace esphome */

/******************************************************************************
 * Functions
 *****************************************************************************/

/** @} */