@startuml class_diagram

package "esphome" <<namespace>> {

    package "uart" <<namespace>> as uartPckg {

        class "UARTDevice" as uartDevice {
            + available() : int
            + read() : int
            + peek() : int
            + write(data: uint8_t) : size_t
        }
    }

    class "Component" as comp {
        + setup()
        + loop()
    }

    package "sensor" <<namespace>> as sensorPckg {

        class "Sensor" as sensor {
            + publish_state(state: float)
        }
    }

    package "binary_sensor" <<namespace>> as binarySensorPckg {

        class "BinarySensor" as binarySensor {
            + publish_state(state: bool)
        }
    }

    package "ivt_rego6xx_ctrl" <<namespace>> as ivtRego6xxCtrlPckg {

        class "IVTRego6xxCtrl" as ivtRego6xxCtrl {
            - m_ctrl : Rego6xxCtrl
            - m_adapter : StreamUartDevAdapter
            + setup()
            + loop()
            + registerSensor(sensor: IVTRego6xxSensor*)
        }

        class "IVTRego6xxSensor" as ivtRego6xxSensor {
            - m_cmdId: uint8_t
            - m_addr: uint16_t
            + IVTRego6xxSensor(cmdId: uint8_t, addr: uint16_t)
            + getCmdId() : uint8_t
            + getAddr() : uint16_t
        }

        class "IVTRego6xxBinarySensor" as ivtRego6xxBinarySensor {
            - m_cmdId: uint8_t
            - m_addr: uint16_t
            + IVTRego6xxBinarySensor(cmdId: uint8_t, addr: uint16_t)
            + getCmdId() : uint8_t
            + getAddr() : uint16_t
        }

        note bottom of ivtRego6xxCtrl
            This class is responsible for controlling the
            IVT Rego6xx series heat pump. It is responsible
            for reading and publishing the sensor values,
            as well as controlling the heat pump.
        end note

        note bottom of ivtRego6xxSensor
            This class is responsible for publishing the
            float sensor values of the IVT Rego6xx series heat pump.
        end note

        note bottom of ivtRego6xxBinarySensor
            This class is responsible for publishing the
            boolean sensor values of the IVT Rego6xx series heat pump.
        end note
    }
}

class "StreamUartDevAdapter" as streamUartDevAdapter {
    - m_uartDevice: UARTDevice&
    + StreamUartDevAdapter(uartDevice: UARTDevice&)
}

note bottom of streamUartDevAdapter
    This class is responsible for adapting the UARTDevice
    class to the Stream interface.
end note

package "lib" <<folder>> as libPckg {

    package "Rego6xx" <<folder>> as rego6xxPckg {

        class "Rego6xxCtrl" as rego6xxCtrl {
            + Rego6xxCtrl(stream: Stream&)
            + process()
        }

        note top of rego6xxCtrl
            This class communicates with the heatpump controller
            via stream interface. It provides the high-level
            control of the heat pump.
        end note
    }
}

package "Arduino" as arduinoPckg {
    interface "Stream" as stream
}

uartDevice <|----- ivtRego6xxCtrl
comp <|- ivtRego6xxCtrl
rego6xxCtrl <-- ivtRego6xxCtrl: <<own>>
streamUartDevAdapter <-- ivtRego6xxCtrl: <<own>>
ivtRego6xxSensor "*" <---o ivtRego6xxCtrl: <<own>>
ivtRego6xxBinarySensor "*" <---o ivtRego6xxCtrl: <<own>>

stream <|.. streamUartDevAdapter: <<realize>>
uartDevice <.. streamUartDevAdapter: <<use>>

rego6xxCtrl ..> stream: <<use>>

sensor <|--- ivtRego6xxSensor
binarySensor <--- ivtRego6xxBinarySensor

@enduml
